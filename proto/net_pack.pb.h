// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_pack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_5fpack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_5fpack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_5fpack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_5fpack_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_5fpack_2eproto;
namespace net {
class data;
struct dataDefaultTypeInternal;
extern dataDefaultTypeInternal _data_default_instance_;
class listen_request;
struct listen_requestDefaultTypeInternal;
extern listen_requestDefaultTypeInternal _listen_request_default_instance_;
class listen_response;
struct listen_responseDefaultTypeInternal;
extern listen_responseDefaultTypeInternal _listen_response_default_instance_;
class pack;
struct packDefaultTypeInternal;
extern packDefaultTypeInternal _pack_default_instance_;
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::data* Arena::CreateMaybeMessage<::net::data>(Arena*);
template<> ::net::listen_request* Arena::CreateMaybeMessage<::net::listen_request>(Arena*);
template<> ::net::listen_response* Arena::CreateMaybeMessage<::net::listen_response>(Arena*);
template<> ::net::pack* Arena::CreateMaybeMessage<::net::pack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {

enum listen_response_Status : int {
  listen_response_Status_success = 0,
  listen_response_Status_listen_fail = 1,
  listen_response_Status_other_host_listening = 3,
  listen_response_Status_listen_response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  listen_response_Status_listen_response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool listen_response_Status_IsValid(int value);
constexpr listen_response_Status listen_response_Status_Status_MIN = listen_response_Status_success;
constexpr listen_response_Status listen_response_Status_Status_MAX = listen_response_Status_other_host_listening;
constexpr int listen_response_Status_Status_ARRAYSIZE = listen_response_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* listen_response_Status_descriptor();
template<typename T>
inline const std::string& listen_response_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, listen_response_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function listen_response_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    listen_response_Status_descriptor(), enum_t_value);
}
inline bool listen_response_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, listen_response_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<listen_response_Status>(
    listen_response_Status_descriptor(), name, value);
}
enum pack_Type : int {
  pack_Type_translate = 0,
  pack_Type_connect = 1,
  pack_Type_disconnect = 2,
  pack_Type_pack_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  pack_Type_pack_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool pack_Type_IsValid(int value);
constexpr pack_Type pack_Type_Type_MIN = pack_Type_translate;
constexpr pack_Type pack_Type_Type_MAX = pack_Type_disconnect;
constexpr int pack_Type_Type_ARRAYSIZE = pack_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pack_Type_descriptor();
template<typename T>
inline const std::string& pack_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, pack_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function pack_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    pack_Type_descriptor(), enum_t_value);
}
inline bool pack_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, pack_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<pack_Type>(
    pack_Type_descriptor(), name, value);
}
// ===================================================================

class listen_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.listen_request) */ {
 public:
  inline listen_request() : listen_request(nullptr) {}
  ~listen_request() override;
  explicit PROTOBUF_CONSTEXPR listen_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  listen_request(const listen_request& from);
  listen_request(listen_request&& from) noexcept
    : listen_request() {
    *this = ::std::move(from);
  }

  inline listen_request& operator=(const listen_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline listen_request& operator=(listen_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const listen_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const listen_request* internal_default_instance() {
    return reinterpret_cast<const listen_request*>(
               &_listen_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(listen_request& a, listen_request& b) {
    a.Swap(&b);
  }
  inline void Swap(listen_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(listen_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  listen_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<listen_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const listen_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const listen_request& from) {
    listen_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(listen_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.listen_request";
  }
  protected:
  explicit listen_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:net.listen_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_5fpack_2eproto;
};
// -------------------------------------------------------------------

class listen_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.listen_response) */ {
 public:
  inline listen_response() : listen_response(nullptr) {}
  ~listen_response() override;
  explicit PROTOBUF_CONSTEXPR listen_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  listen_response(const listen_response& from);
  listen_response(listen_response&& from) noexcept
    : listen_response() {
    *this = ::std::move(from);
  }

  inline listen_response& operator=(const listen_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline listen_response& operator=(listen_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const listen_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const listen_response* internal_default_instance() {
    return reinterpret_cast<const listen_response*>(
               &_listen_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(listen_response& a, listen_response& b) {
    a.Swap(&b);
  }
  inline void Swap(listen_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(listen_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  listen_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<listen_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const listen_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const listen_response& from) {
    listen_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(listen_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.listen_response";
  }
  protected:
  explicit listen_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef listen_response_Status Status;
  static constexpr Status success =
    listen_response_Status_success;
  static constexpr Status listen_fail =
    listen_response_Status_listen_fail;
  static constexpr Status other_host_listening =
    listen_response_Status_other_host_listening;
  static inline bool Status_IsValid(int value) {
    return listen_response_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    listen_response_Status_Status_MIN;
  static constexpr Status Status_MAX =
    listen_response_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    listen_response_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return listen_response_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return listen_response_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return listen_response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // .net.listen_response.Status status = 2;
  void clear_status();
  ::net::listen_response_Status status() const;
  void set_status(::net::listen_response_Status value);
  private:
  ::net::listen_response_Status _internal_status() const;
  void _internal_set_status(::net::listen_response_Status value);
  public:

  // @@protoc_insertion_point(class_scope:net.listen_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_5fpack_2eproto;
};
// -------------------------------------------------------------------

class pack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.pack) */ {
 public:
  inline pack() : pack(nullptr) {}
  ~pack() override;
  explicit PROTOBUF_CONSTEXPR pack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pack(const pack& from);
  pack(pack&& from) noexcept
    : pack() {
    *this = ::std::move(from);
  }

  inline pack& operator=(const pack& from) {
    CopyFrom(from);
    return *this;
  }
  inline pack& operator=(pack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pack& default_instance() {
    return *internal_default_instance();
  }
  static inline const pack* internal_default_instance() {
    return reinterpret_cast<const pack*>(
               &_pack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(pack& a, pack& b) {
    a.Swap(&b);
  }
  inline void Swap(pack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pack& from) {
    pack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.pack";
  }
  protected:
  explicit pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef pack_Type Type;
  static constexpr Type translate =
    pack_Type_translate;
  static constexpr Type connect =
    pack_Type_connect;
  static constexpr Type disconnect =
    pack_Type_disconnect;
  static inline bool Type_IsValid(int value) {
    return pack_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    pack_Type_Type_MIN;
  static constexpr Type Type_MAX =
    pack_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    pack_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return pack_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return pack_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return pack_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kIdFieldNumber = 1,
    kPortFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // .net.pack.Type type = 3;
  void clear_type();
  ::net::pack_Type type() const;
  void set_type(::net::pack_Type value);
  private:
  ::net::pack_Type _internal_type() const;
  void _internal_set_type(::net::pack_Type value);
  public:

  // @@protoc_insertion_point(class_scope:net.pack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t id_;
    uint32_t port_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_5fpack_2eproto;
};
// -------------------------------------------------------------------

class data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.data) */ {
 public:
  inline data() : data(nullptr) {}
  ~data() override;
  explicit PROTOBUF_CONSTEXPR data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  data(const data& from);
  data(data&& from) noexcept
    : data() {
    *this = ::std::move(from);
  }

  inline data& operator=(const data& from) {
    CopyFrom(from);
    return *this;
  }
  inline data& operator=(data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const data& default_instance() {
    return *internal_default_instance();
  }
  static inline const data* internal_default_instance() {
    return reinterpret_cast<const data*>(
               &_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(data& a, data& b) {
    a.Swap(&b);
  }
  inline void Swap(data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const data& from) {
    data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.data";
  }
  protected:
  explicit data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenRequestFieldNumber = 1,
    kListenResponseFieldNumber = 2,
    kPackFieldNumber = 3,
  };
  // optional .net.listen_request listen_request = 1;
  bool has_listen_request() const;
  private:
  bool _internal_has_listen_request() const;
  public:
  void clear_listen_request();
  const ::net::listen_request& listen_request() const;
  PROTOBUF_NODISCARD ::net::listen_request* release_listen_request();
  ::net::listen_request* mutable_listen_request();
  void set_allocated_listen_request(::net::listen_request* listen_request);
  private:
  const ::net::listen_request& _internal_listen_request() const;
  ::net::listen_request* _internal_mutable_listen_request();
  public:
  void unsafe_arena_set_allocated_listen_request(
      ::net::listen_request* listen_request);
  ::net::listen_request* unsafe_arena_release_listen_request();

  // optional .net.listen_response listen_response = 2;
  bool has_listen_response() const;
  private:
  bool _internal_has_listen_response() const;
  public:
  void clear_listen_response();
  const ::net::listen_response& listen_response() const;
  PROTOBUF_NODISCARD ::net::listen_response* release_listen_response();
  ::net::listen_response* mutable_listen_response();
  void set_allocated_listen_response(::net::listen_response* listen_response);
  private:
  const ::net::listen_response& _internal_listen_response() const;
  ::net::listen_response* _internal_mutable_listen_response();
  public:
  void unsafe_arena_set_allocated_listen_response(
      ::net::listen_response* listen_response);
  ::net::listen_response* unsafe_arena_release_listen_response();

  // optional .net.pack pack = 3;
  bool has_pack() const;
  private:
  bool _internal_has_pack() const;
  public:
  void clear_pack();
  const ::net::pack& pack() const;
  PROTOBUF_NODISCARD ::net::pack* release_pack();
  ::net::pack* mutable_pack();
  void set_allocated_pack(::net::pack* pack);
  private:
  const ::net::pack& _internal_pack() const;
  ::net::pack* _internal_mutable_pack();
  public:
  void unsafe_arena_set_allocated_pack(
      ::net::pack* pack);
  ::net::pack* unsafe_arena_release_pack();

  // @@protoc_insertion_point(class_scope:net.data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::net::listen_request* listen_request_;
    ::net::listen_response* listen_response_;
    ::net::pack* pack_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_5fpack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// listen_request

// uint32 port = 1;
inline void listen_request::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t listen_request::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t listen_request::port() const {
  // @@protoc_insertion_point(field_get:net.listen_request.port)
  return _internal_port();
}
inline void listen_request::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void listen_request::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:net.listen_request.port)
}

// -------------------------------------------------------------------

// listen_response

// uint32 port = 1;
inline void listen_response::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t listen_response::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t listen_response::port() const {
  // @@protoc_insertion_point(field_get:net.listen_response.port)
  return _internal_port();
}
inline void listen_response::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void listen_response::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:net.listen_response.port)
}

// .net.listen_response.Status status = 2;
inline void listen_response::clear_status() {
  _impl_.status_ = 0;
}
inline ::net::listen_response_Status listen_response::_internal_status() const {
  return static_cast< ::net::listen_response_Status >(_impl_.status_);
}
inline ::net::listen_response_Status listen_response::status() const {
  // @@protoc_insertion_point(field_get:net.listen_response.status)
  return _internal_status();
}
inline void listen_response::_internal_set_status(::net::listen_response_Status value) {
  
  _impl_.status_ = value;
}
inline void listen_response::set_status(::net::listen_response_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:net.listen_response.status)
}

// -------------------------------------------------------------------

// pack

// uint64 id = 1;
inline void pack::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t pack::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t pack::id() const {
  // @@protoc_insertion_point(field_get:net.pack.id)
  return _internal_id();
}
inline void pack::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void pack::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:net.pack.id)
}

// uint32 port = 2;
inline void pack::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t pack::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t pack::port() const {
  // @@protoc_insertion_point(field_get:net.pack.port)
  return _internal_port();
}
inline void pack::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void pack::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:net.pack.port)
}

// .net.pack.Type type = 3;
inline void pack::clear_type() {
  _impl_.type_ = 0;
}
inline ::net::pack_Type pack::_internal_type() const {
  return static_cast< ::net::pack_Type >(_impl_.type_);
}
inline ::net::pack_Type pack::type() const {
  // @@protoc_insertion_point(field_get:net.pack.type)
  return _internal_type();
}
inline void pack::_internal_set_type(::net::pack_Type value) {
  
  _impl_.type_ = value;
}
inline void pack::set_type(::net::pack_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:net.pack.type)
}

// bytes data = 4;
inline void pack::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& pack::data() const {
  // @@protoc_insertion_point(field_get:net.pack.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:net.pack.data)
}
inline std::string* pack::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:net.pack.data)
  return _s;
}
inline const std::string& pack::_internal_data() const {
  return _impl_.data_.Get();
}
inline void pack::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_data() {
  // @@protoc_insertion_point(field_release:net.pack.data)
  return _impl_.data_.Release();
}
inline void pack::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:net.pack.data)
}

// -------------------------------------------------------------------

// data

// optional .net.listen_request listen_request = 1;
inline bool data::_internal_has_listen_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.listen_request_ != nullptr);
  return value;
}
inline bool data::has_listen_request() const {
  return _internal_has_listen_request();
}
inline void data::clear_listen_request() {
  if (_impl_.listen_request_ != nullptr) _impl_.listen_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::net::listen_request& data::_internal_listen_request() const {
  const ::net::listen_request* p = _impl_.listen_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::net::listen_request&>(
      ::net::_listen_request_default_instance_);
}
inline const ::net::listen_request& data::listen_request() const {
  // @@protoc_insertion_point(field_get:net.data.listen_request)
  return _internal_listen_request();
}
inline void data::unsafe_arena_set_allocated_listen_request(
    ::net::listen_request* listen_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.listen_request_);
  }
  _impl_.listen_request_ = listen_request;
  if (listen_request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:net.data.listen_request)
}
inline ::net::listen_request* data::release_listen_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::net::listen_request* temp = _impl_.listen_request_;
  _impl_.listen_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::net::listen_request* data::unsafe_arena_release_listen_request() {
  // @@protoc_insertion_point(field_release:net.data.listen_request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::net::listen_request* temp = _impl_.listen_request_;
  _impl_.listen_request_ = nullptr;
  return temp;
}
inline ::net::listen_request* data::_internal_mutable_listen_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.listen_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::listen_request>(GetArenaForAllocation());
    _impl_.listen_request_ = p;
  }
  return _impl_.listen_request_;
}
inline ::net::listen_request* data::mutable_listen_request() {
  ::net::listen_request* _msg = _internal_mutable_listen_request();
  // @@protoc_insertion_point(field_mutable:net.data.listen_request)
  return _msg;
}
inline void data::set_allocated_listen_request(::net::listen_request* listen_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.listen_request_;
  }
  if (listen_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(listen_request);
    if (message_arena != submessage_arena) {
      listen_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listen_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.listen_request_ = listen_request;
  // @@protoc_insertion_point(field_set_allocated:net.data.listen_request)
}

// optional .net.listen_response listen_response = 2;
inline bool data::_internal_has_listen_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.listen_response_ != nullptr);
  return value;
}
inline bool data::has_listen_response() const {
  return _internal_has_listen_response();
}
inline void data::clear_listen_response() {
  if (_impl_.listen_response_ != nullptr) _impl_.listen_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::net::listen_response& data::_internal_listen_response() const {
  const ::net::listen_response* p = _impl_.listen_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::net::listen_response&>(
      ::net::_listen_response_default_instance_);
}
inline const ::net::listen_response& data::listen_response() const {
  // @@protoc_insertion_point(field_get:net.data.listen_response)
  return _internal_listen_response();
}
inline void data::unsafe_arena_set_allocated_listen_response(
    ::net::listen_response* listen_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.listen_response_);
  }
  _impl_.listen_response_ = listen_response;
  if (listen_response) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:net.data.listen_response)
}
inline ::net::listen_response* data::release_listen_response() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::net::listen_response* temp = _impl_.listen_response_;
  _impl_.listen_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::net::listen_response* data::unsafe_arena_release_listen_response() {
  // @@protoc_insertion_point(field_release:net.data.listen_response)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::net::listen_response* temp = _impl_.listen_response_;
  _impl_.listen_response_ = nullptr;
  return temp;
}
inline ::net::listen_response* data::_internal_mutable_listen_response() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.listen_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::listen_response>(GetArenaForAllocation());
    _impl_.listen_response_ = p;
  }
  return _impl_.listen_response_;
}
inline ::net::listen_response* data::mutable_listen_response() {
  ::net::listen_response* _msg = _internal_mutable_listen_response();
  // @@protoc_insertion_point(field_mutable:net.data.listen_response)
  return _msg;
}
inline void data::set_allocated_listen_response(::net::listen_response* listen_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.listen_response_;
  }
  if (listen_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(listen_response);
    if (message_arena != submessage_arena) {
      listen_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listen_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.listen_response_ = listen_response;
  // @@protoc_insertion_point(field_set_allocated:net.data.listen_response)
}

// optional .net.pack pack = 3;
inline bool data::_internal_has_pack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pack_ != nullptr);
  return value;
}
inline bool data::has_pack() const {
  return _internal_has_pack();
}
inline void data::clear_pack() {
  if (_impl_.pack_ != nullptr) _impl_.pack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::net::pack& data::_internal_pack() const {
  const ::net::pack* p = _impl_.pack_;
  return p != nullptr ? *p : reinterpret_cast<const ::net::pack&>(
      ::net::_pack_default_instance_);
}
inline const ::net::pack& data::pack() const {
  // @@protoc_insertion_point(field_get:net.data.pack)
  return _internal_pack();
}
inline void data::unsafe_arena_set_allocated_pack(
    ::net::pack* pack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pack_);
  }
  _impl_.pack_ = pack;
  if (pack) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:net.data.pack)
}
inline ::net::pack* data::release_pack() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::net::pack* temp = _impl_.pack_;
  _impl_.pack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::net::pack* data::unsafe_arena_release_pack() {
  // @@protoc_insertion_point(field_release:net.data.pack)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::net::pack* temp = _impl_.pack_;
  _impl_.pack_ = nullptr;
  return temp;
}
inline ::net::pack* data::_internal_mutable_pack() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pack_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::pack>(GetArenaForAllocation());
    _impl_.pack_ = p;
  }
  return _impl_.pack_;
}
inline ::net::pack* data::mutable_pack() {
  ::net::pack* _msg = _internal_mutable_pack();
  // @@protoc_insertion_point(field_mutable:net.data.pack)
  return _msg;
}
inline void data::set_allocated_pack(::net::pack* pack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pack_;
  }
  if (pack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pack);
    if (message_arena != submessage_arena) {
      pack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pack, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pack_ = pack;
  // @@protoc_insertion_point(field_set_allocated:net.data.pack)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::net::listen_response_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::net::listen_response_Status>() {
  return ::net::listen_response_Status_descriptor();
}
template <> struct is_proto_enum< ::net::pack_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::net::pack_Type>() {
  return ::net::pack_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_5fpack_2eproto
