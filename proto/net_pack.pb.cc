// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_pack.proto

#include "net_pack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace net {
PROTOBUF_CONSTEXPR listen_request::listen_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct listen_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR listen_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~listen_requestDefaultTypeInternal() {}
  union {
    listen_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 listen_requestDefaultTypeInternal _listen_request_default_instance_;
PROTOBUF_CONSTEXPR listen_response::listen_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct listen_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR listen_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~listen_responseDefaultTypeInternal() {}
  union {
    listen_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 listen_responseDefaultTypeInternal _listen_response_default_instance_;
PROTOBUF_CONSTEXPR pack::pack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct packDefaultTypeInternal {
  PROTOBUF_CONSTEXPR packDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~packDefaultTypeInternal() {}
  union {
    pack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 packDefaultTypeInternal _pack_default_instance_;
PROTOBUF_CONSTEXPR data::data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.listen_request_)*/nullptr
  , /*decltype(_impl_.listen_response_)*/nullptr
  , /*decltype(_impl_.pack_)*/nullptr} {}
struct dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~dataDefaultTypeInternal() {}
  union {
    data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dataDefaultTypeInternal _data_default_instance_;
}  // namespace net
static ::_pb::Metadata file_level_metadata_net_5fpack_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_net_5fpack_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_5fpack_2eproto = nullptr;

const uint32_t TableStruct_net_5fpack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::listen_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::net::listen_request, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::listen_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::net::listen_response, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::net::listen_response, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::net::pack, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::net::pack, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::net::pack, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::net::pack, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::net::data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::net::data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::net::data, _impl_.listen_request_),
  PROTOBUF_FIELD_OFFSET(::net::data, _impl_.listen_response_),
  PROTOBUF_FIELD_OFFSET(::net::data, _impl_.pack_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::net::listen_request)},
  { 7, -1, -1, sizeof(::net::listen_response)},
  { 15, -1, -1, sizeof(::net::pack)},
  { 25, 34, -1, sizeof(::net::data)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::net::_listen_request_default_instance_._instance,
  &::net::_listen_response_default_instance_._instance,
  &::net::_pack_default_instance_._instance,
  &::net::_data_default_instance_._instance,
};

const char descriptor_table_protodef_net_5fpack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016net_pack.proto\022\003net\"\036\n\016listen_request\022"
  "\014\n\004port\030\001 \001(\r\"\216\001\n\017listen_response\022\014\n\004por"
  "t\030\001 \001(\r\022+\n\006status\030\002 \001(\0162\033.net.listen_res"
  "ponse.Status\"@\n\006Status\022\013\n\007success\020\000\022\017\n\013l"
  "isten_fail\020\001\022\030\n\024other_host_listening\020\003\"\200"
  "\001\n\004pack\022\n\n\002id\030\001 \001(\004\022\014\n\004port\030\002 \001(\r\022\034\n\004typ"
  "e\030\003 \001(\0162\016.net.pack.Type\022\014\n\004data\030\004 \001(\014\"2\n"
  "\004Type\022\r\n\ttranslate\020\000\022\013\n\007connect\020\001\022\016\n\ndis"
  "connect\020\002\"\272\001\n\004data\0220\n\016listen_request\030\001 \001"
  "(\0132\023.net.listen_requestH\000\210\001\001\0222\n\017listen_r"
  "esponse\030\002 \001(\0132\024.net.listen_responseH\001\210\001\001"
  "\022\034\n\004pack\030\003 \001(\0132\t.net.packH\002\210\001\001B\021\n\017_liste"
  "n_requestB\022\n\020_listen_responseB\007\n\005_packb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_net_5fpack_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_5fpack_2eproto = {
    false, false, 526, descriptor_table_protodef_net_5fpack_2eproto,
    "net_pack.proto",
    &descriptor_table_net_5fpack_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_net_5fpack_2eproto::offsets,
    file_level_metadata_net_5fpack_2eproto, file_level_enum_descriptors_net_5fpack_2eproto,
    file_level_service_descriptors_net_5fpack_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_5fpack_2eproto_getter() {
  return &descriptor_table_net_5fpack_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_5fpack_2eproto(&descriptor_table_net_5fpack_2eproto);
namespace net {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* listen_response_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_5fpack_2eproto);
  return file_level_enum_descriptors_net_5fpack_2eproto[0];
}
bool listen_response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr listen_response_Status listen_response::success;
constexpr listen_response_Status listen_response::listen_fail;
constexpr listen_response_Status listen_response::other_host_listening;
constexpr listen_response_Status listen_response::Status_MIN;
constexpr listen_response_Status listen_response::Status_MAX;
constexpr int listen_response::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pack_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_5fpack_2eproto);
  return file_level_enum_descriptors_net_5fpack_2eproto[1];
}
bool pack_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr pack_Type pack::translate;
constexpr pack_Type pack::connect;
constexpr pack_Type pack::disconnect;
constexpr pack_Type pack::Type_MIN;
constexpr pack_Type pack::Type_MAX;
constexpr int pack::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class listen_request::_Internal {
 public:
};

listen_request::listen_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:net.listen_request)
}
listen_request::listen_request(const listen_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  listen_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:net.listen_request)
}

inline void listen_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

listen_request::~listen_request() {
  // @@protoc_insertion_point(destructor:net.listen_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void listen_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void listen_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void listen_request::Clear() {
// @@protoc_insertion_point(message_clear_start:net.listen_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* listen_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* listen_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.listen_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.listen_request)
  return target;
}

size_t listen_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.listen_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData listen_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    listen_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*listen_request::GetClassData() const { return &_class_data_; }


void listen_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<listen_request*>(&to_msg);
  auto& from = static_cast<const listen_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.listen_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void listen_request::CopyFrom(const listen_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.listen_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool listen_request::IsInitialized() const {
  return true;
}

void listen_request::InternalSwap(listen_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata listen_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5fpack_2eproto_getter, &descriptor_table_net_5fpack_2eproto_once,
      file_level_metadata_net_5fpack_2eproto[0]);
}

// ===================================================================

class listen_response::_Internal {
 public:
};

listen_response::listen_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:net.listen_response)
}
listen_response::listen_response(const listen_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  listen_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:net.listen_response)
}

inline void listen_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

listen_response::~listen_response() {
  // @@protoc_insertion_point(destructor:net.listen_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void listen_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void listen_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void listen_response::Clear() {
// @@protoc_insertion_point(message_clear_start:net.listen_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* listen_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .net.listen_response.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::net::listen_response_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* listen_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.listen_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // .net.listen_response.Status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.listen_response)
  return target;
}

size_t listen_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.listen_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .net.listen_response.Status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData listen_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    listen_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*listen_response::GetClassData() const { return &_class_data_; }


void listen_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<listen_response*>(&to_msg);
  auto& from = static_cast<const listen_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.listen_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void listen_response::CopyFrom(const listen_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.listen_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool listen_response::IsInitialized() const {
  return true;
}

void listen_response::InternalSwap(listen_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(listen_response, _impl_.status_)
      + sizeof(listen_response::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(listen_response, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata listen_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5fpack_2eproto_getter, &descriptor_table_net_5fpack_2eproto_once,
      file_level_metadata_net_5fpack_2eproto[1]);
}

// ===================================================================

class pack::_Internal {
 public:
};

pack::pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:net.pack)
}
pack::pack(const pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  pack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:net.pack)
}

inline void pack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pack::~pack() {
  // @@protoc_insertion_point(destructor:net.pack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void pack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void pack::Clear() {
// @@protoc_insertion_point(message_clear_start:net.pack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .net.pack.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::net::pack_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.pack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .net.pack.Type type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.pack)
  return target;
}

size_t pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.pack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .net.pack.Type type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    pack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pack::GetClassData() const { return &_class_data_; }


void pack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<pack*>(&to_msg);
  auto& from = static_cast<const pack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.pack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pack::CopyFrom(const pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pack::IsInitialized() const {
  return true;
}

void pack::InternalSwap(pack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pack, _impl_.type_)
      + sizeof(pack::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(pack, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5fpack_2eproto_getter, &descriptor_table_net_5fpack_2eproto_once,
      file_level_metadata_net_5fpack_2eproto[2]);
}

// ===================================================================

class data::_Internal {
 public:
  using HasBits = decltype(std::declval<data>()._impl_._has_bits_);
  static const ::net::listen_request& listen_request(const data* msg);
  static void set_has_listen_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::net::listen_response& listen_response(const data* msg);
  static void set_has_listen_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::net::pack& pack(const data* msg);
  static void set_has_pack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::net::listen_request&
data::_Internal::listen_request(const data* msg) {
  return *msg->_impl_.listen_request_;
}
const ::net::listen_response&
data::_Internal::listen_response(const data* msg) {
  return *msg->_impl_.listen_response_;
}
const ::net::pack&
data::_Internal::pack(const data* msg) {
  return *msg->_impl_.pack_;
}
data::data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:net.data)
}
data::data(const data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listen_request_){nullptr}
    , decltype(_impl_.listen_response_){nullptr}
    , decltype(_impl_.pack_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_listen_request()) {
    _this->_impl_.listen_request_ = new ::net::listen_request(*from._impl_.listen_request_);
  }
  if (from._internal_has_listen_response()) {
    _this->_impl_.listen_response_ = new ::net::listen_response(*from._impl_.listen_response_);
  }
  if (from._internal_has_pack()) {
    _this->_impl_.pack_ = new ::net::pack(*from._impl_.pack_);
  }
  // @@protoc_insertion_point(copy_constructor:net.data)
}

inline void data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listen_request_){nullptr}
    , decltype(_impl_.listen_response_){nullptr}
    , decltype(_impl_.pack_){nullptr}
  };
}

data::~data() {
  // @@protoc_insertion_point(destructor:net.data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.listen_request_;
  if (this != internal_default_instance()) delete _impl_.listen_response_;
  if (this != internal_default_instance()) delete _impl_.pack_;
}

void data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void data::Clear() {
// @@protoc_insertion_point(message_clear_start:net.data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.listen_request_ != nullptr);
      _impl_.listen_request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.listen_response_ != nullptr);
      _impl_.listen_response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pack_ != nullptr);
      _impl_.pack_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .net.listen_request listen_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_listen_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .net.listen_response listen_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_listen_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .net.pack pack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .net.listen_request listen_request = 1;
  if (_internal_has_listen_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::listen_request(this),
        _Internal::listen_request(this).GetCachedSize(), target, stream);
  }

  // optional .net.listen_response listen_response = 2;
  if (_internal_has_listen_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::listen_response(this),
        _Internal::listen_response(this).GetCachedSize(), target, stream);
  }

  // optional .net.pack pack = 3;
  if (_internal_has_pack()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pack(this),
        _Internal::pack(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.data)
  return target;
}

size_t data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .net.listen_request listen_request = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.listen_request_);
    }

    // optional .net.listen_response listen_response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.listen_response_);
    }

    // optional .net.pack pack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pack_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*data::GetClassData() const { return &_class_data_; }


void data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<data*>(&to_msg);
  auto& from = static_cast<const data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_listen_request()->::net::listen_request::MergeFrom(
          from._internal_listen_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_listen_response()->::net::listen_response::MergeFrom(
          from._internal_listen_response());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pack()->::net::pack::MergeFrom(
          from._internal_pack());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void data::CopyFrom(const data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data::IsInitialized() const {
  return true;
}

void data::InternalSwap(data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(data, _impl_.pack_)
      + sizeof(data::_impl_.pack_)
      - PROTOBUF_FIELD_OFFSET(data, _impl_.listen_request_)>(
          reinterpret_cast<char*>(&_impl_.listen_request_),
          reinterpret_cast<char*>(&other->_impl_.listen_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5fpack_2eproto_getter, &descriptor_table_net_5fpack_2eproto_once,
      file_level_metadata_net_5fpack_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::listen_request*
Arena::CreateMaybeMessage< ::net::listen_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::listen_request >(arena);
}
template<> PROTOBUF_NOINLINE ::net::listen_response*
Arena::CreateMaybeMessage< ::net::listen_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::listen_response >(arena);
}
template<> PROTOBUF_NOINLINE ::net::pack*
Arena::CreateMaybeMessage< ::net::pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::pack >(arena);
}
template<> PROTOBUF_NOINLINE ::net::data*
Arena::CreateMaybeMessage< ::net::data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
